"use strict";

define("nodes/components/driver-ionoscloud/component", ["exports", "shared/mixins/node-driver"], function (exports, _nodeDriver) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  function _slicedToArray(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
  }

  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance");
  }

  function _iterableToArrayLimit(arr, i) {
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;

    try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
  }

  var LAYOUT = "";
  var computed = Ember.computed;
  var get = Ember.get;
  var set = Ember.set;
  var alias = Ember.computed.alias;
  var service = Ember.inject.service;
  var defaultRadix = 10;
  var defaultBase = 1024;
  exports.default = Ember.Component.extend(_nodeDriver.default, {
    driverName: 'ionoscloud',
    config: alias('model.ionoscloudConfig'),
    app: service(),
    init: function init() {
      var decodedLayout = window.atob(LAYOUT);
      var template = Ember.HTMLBars.compile(decodedLayout, {
        moduleName: 'nodes/components/driver-ionoscloud/template'
      });
      set(this, 'layout', template);

      this._super.apply(this, arguments);
    },
    lans: [],
    actions: {
      save: function save() {
        this.set('config.natPublicIps', this.config.natPublicIps);
        this.set('config.nicIps', this.config.nicIps);
        this.config.natLansToGateways = this.lans.map(function (lan) {
          return "".concat(lan.id, "=").concat(lan.gatewayIps.join(','));
        }).join(':');
        this.set('config.natLansToGateways', this.config.natLansToGateways);

        this._super.apply(this, arguments);
      },
      reverseNatLansToGatewaysMap: function reverseNatLansToGatewaysMap() {
        var marshalledString = this.get('config.natLansToGateways');

        if (!marshalledString) {
          marshalledString = "";
        }

        var lans = marshalledString ? marshalledString.split(':').map(function (entry) {
          var _entry$split = entry.split('='),
              _entry$split2 = _slicedToArray(_entry$split, 2),
              id = _entry$split2[0],
              gatewayIps = _entry$split2[1];

          return {
            id: parseInt(id),
            gatewayIps: gatewayIps ? gatewayIps.split(',') : []
          };
        }) : [];
        this.set('lans', lans);
      },
      addGatewayIp: function addGatewayIp(lanId, gatewayIp) {
        if (validateIp(gatewayIp)) {
          var existingLan = this.lans.filter(function (lan) {
            return lan.id === lanId;
          })[0];

          if (existingLan === undefined) {
            this.lans.pushObject({
              id: lanId,
              gatewayIps: [gatewayIp]
            });
          } else {
            existingLan.gatewayIps.pushObject(gatewayIp);
          }

          this.send('updateNatLansToGatewaysMap');
        } else {
          alert("You have entered an invalid IP address!");
        }
      },
      deleteGatewayIp: function deleteGatewayIp(lan, index) {
        lan.gatewayIps.removeAt(index);

        if (lan.gatewayIps.length === 0) {
          this.lans.removeObject(lan);
        }

        this.send('updateNatLansToGatewaysMap');
      },
      addFlowlog: function addFlowlog(flowlogName, flowlogAction, flowlogDirection, flowlogBucket) {
        if (!flowlogName) {
          alert("Flowlog name should not be null!");
          return;
        }

        if (!flowlogBucket) {
          alert("Flowlog bucket should not be null!");
          return;
        }

        var newFlowlog = [flowlogName, flowlogAction, flowlogDirection, flowlogBucket].join(':');

        if (this.config.natFlowlogs.includes(newFlowlog)) {
          alert("Flowlog already exists!");
          return;
        }

        this.config.natFlowlogs.pushObject(newFlowlog);
      },
      deleteFlowlog: function deleteFlowlog(index) {
        this.config.natFlowlogs.removeAt(index);
      },
      addNatRule: function addNatRule(natRuleName, natRuleType, natRuleProtocol, natRulePublicIp, natRuleSourceSubnet, natRuleTargetSubnet, natRulePortStart, natRulePortEnd) {
        if (!natRuleName) {
          alert("NAT rule name should not be null!");
          return;
        }

        if (natRulePublicIp && !validateIp(natRulePublicIp)) {
          alert("Invalid IP detected: " + natRulePublicIp);
          return false;
        }

        if (natRuleSourceSubnet && !validateSubnet(natRuleSourceSubnet)) {
          alert("Invalid Source Subnet detected: " + natRuleSourceSubnet);
          return false;
        }

        if (natRuleTargetSubnet && !validateSubnet(natRuleTargetSubnet)) {
          alert("Invalid Target Subnet detected: " + natRuleTargetSubnet);
          return false;
        }

        if (natRulePortStart && Number.isNaN(parseInt(natRulePortStart))) {
          alert("Invalid Start Port detected: " + natRulePortStart);
          return;
        }

        if (natRulePortEnd && Number.isNaN(parseInt(natRulePortEnd))) {
          alert("Invalid End Port detected: " + natRulePortEnd);
          return false;
        }

        var newRule = [natRuleName, natRuleType, natRuleProtocol, natRulePublicIp, natRuleSourceSubnet, natRuleTargetSubnet, natRulePortStart, natRulePortEnd].join(':');

        if (this.config.natRules.includes(newRule)) {
          alert("Rule already exists!");
          return;
        }

        this.config.natRules.pushObject(newRule);
      },
      deleteNatRule: function deleteNatRule(index) {
        this.config.natRules.removeAt(index);
      },
      addPublicIp: function addPublicIp(newPublicIp) {
        if (validateIp(newPublicIp)) {
          this.config.natPublicIps.pushObject(newPublicIp);
          this.set("newPublicIp", "");
        } else {
          alert("You have entered an invalid IP address!");
        }
      },
      deletePublicIp: function deletePublicIp(index) {
        this.config.natPublicIps.removeAt(index);
      },
      addNicIp: function addNicIp(newIp) {
        if (validateIp(newIp)) {
          this.config.nicIps.pushObject(newIp);
          this.set("newIp", "");
        } else {
          alert("You have entered an invalid IP address!");
        }
      },
      deleteNicIp: function deleteNicIp(index) {
        this.config.nicIps.removeAt(index);
      }
    },
    bootstrap: function bootstrap() {
      var config = get(this, 'globalStore').createRecord({
        type: 'ionoscloudConfig',
        cores: 2,
        ram: 2048,
        cloudInit: '',
        token: '',
        username: '',
        createNat: false,
        privateLan: false,
        sshInCloudInit: false,
        waitForIpChange: false,
        waitForIpChangeTimeout: 600,
        password: '',
        endpoint: 'https://api.ionos.com/cloudapi/v6',
        serverType: 'ENTERPRISE',
        flowlogAction: 'ALL',
        flowlogDirection: 'BIDIRECTIONAL',
        natRuleType: 'SNAT',
        natRuleProtocol: 'ALL',
        natPublicIps: [],
        nicDhcp: false,
        nicIps: [],
        natFlowlogs: [],
        natRules: ['rule01:SNAT:TCP::::22:22', 'rule02:SNAT:UDP::::53:53', 'rule03:SNAT:TCP::::80:80', 'rule04:SNAT:TCP::::179:179', 'rule05:SNAT:TCP::::443:443', 'rule06:SNAT:TCP::::2376:2376', 'rule07:SNAT:UDP::::4789:4789', 'rule08:SNAT:TCP::::6443:6443', 'rule09:SNAT:TCP::::6783:6783', 'rule10:SNAT:TCP::::8443:8443', 'rule11:SNAT:UDP::::8472:8472', 'rule12:SNAT:TCP::::9099:9099', 'rule13:SNAT:TCP::::9100:9100', 'rule14:SNAT:TCP::::9443:9443', 'rule15:SNAT:TCP::::9796:9796', 'rule16:SNAT:TCP::::10254:10254', 'rule17:SNAT:TCP::::10256:10256', 'rule18:SNAT:TCP::::2379:2380', 'rule19:SNAT:UDP::::6783:6784', 'rule20:SNAT:TCP::::10250:10252', 'rule21:SNAT:TCP::::30000:32767', 'rule22:SNAT:UDP::::30000:32767', 'rule23:SNAT:ALL:::::'],
        skipDefaultNatRules: true
      });
      set(this, 'model.ionoscloudConfig', config);
    },
    validate: function validate() {
      this._super();

      var errors = get(this, 'errors') || [];

      if (!get(this, 'model.name')) {
        errors.push('Name is required');
      }

      if (parseInt(get(this, 'config.memorySize'), defaultRadix) < defaultBase) {
        errors.push('Memory Size must be at least 1024 MB');
      }

      if (get(errors, 'length')) {
        set(this, 'errors', errors);
        return false;
      } else {
        set(this, 'errors', null);
        return true;
      }
    },
    didInsertElement: function didInsertElement() {
      this._super.apply(this, arguments);

      this.send('reverseNatLansToGatewaysMap');
    },
    zoneOptions: [{
      name: 'AUTO',
      value: 'AUTO'
    }, {
      name: 'ZONE_1',
      value: 'ZONE_1'
    }, {
      name: 'ZONE_2',
      value: 'ZONE_2'
    }, {
      name: 'ZONE_3',
      value: 'ZONE_3'
    }],
    locationOptions: [{
      name: 'Las Vegas, USA',
      value: 'us/las'
    }, {
      name: 'Newark, USA',
      value: 'us/ewr'
    }, {
      name: 'Frankfurt, Germany',
      value: 'de/fra'
    }, {
      name: 'Berlin, Germany',
      value: 'de/txl'
    }, {
      name: 'London, UK',
      value: 'gb/lhr'
    }, {
      name: 'Logroño, Spain',
      value: 'es/vit'
    }, {
      name: 'Paris, France',
      value: 'fr/par'
    }],
    serverTypeOptions: [{
      name: 'Enterprise',
      value: 'ENTERPRISE'
    }, {
      name: 'Cube',
      value: 'CUBE'
    }],
    cubeServerTemplateOptions: [{
      name: 'XS',
      value: 'CUBES XS'
    }, {
      name: 'S',
      value: 'CUBES S'
    }, {
      name: 'M',
      value: 'CUBES M'
    }, {
      name: 'L',
      value: 'CUBES L'
    }, {
      name: 'XL',
      value: 'CUBES XL'
    }, {
      name: 'XXL',
      value: 'CUBES XXL'
    }, {
      name: '3XL',
      value: 'CUBES 3XL'
    }, {
      name: '4XL',
      value: 'CUBES 4XL'
    }],
    cpuOptions: [{
      name: 'Intel SKYLAKE (Europe)',
      value: 'INTEL_SKYLAKE'
    }, {
      name: 'AMD OPTERON (USA)',
      value: 'AMD_OPTERON'
    }, {
      name: 'Intel XEON (USA)',
      value: 'INTEL_XEON'
    }],
    storageTypeOptions: [{
      name: 'HDD',
      value: 'HDD'
    }, {
      name: 'SSD',
      value: 'SSD'
    }],
    flowlogActionOptions: [{
      name: 'ALL',
      value: 'ALL'
    }, {
      name: 'ACCEPTED',
      value: 'ACCEPTED'
    }, {
      name: 'REJECTED',
      value: 'REJECTED'
    }],
    flowlogDirectionOptions: [{
      name: 'BIDIRECTIONAL',
      value: 'BIDIRECTIONAL'
    }, {
      name: 'INGRESS',
      value: 'INGRESS'
    }, {
      name: 'EGRESS',
      value: 'EGRESS'
    }],
    natRuleTypeOptions: [{
      name: 'SNAT',
      value: 'SNAT'
    }],
    natRuleProtocolOptions: [{
      name: 'ALL',
      value: 'ALL'
    }, {
      name: 'TCP',
      value: 'TCP'
    }, {
      name: 'UDP',
      value: 'UDP'
    }, {
      name: 'ICMP',
      value: 'ICMP'
    }]
  });

  function validateIp(ip) {
    if (/^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/.test(ip)) {
      return true;
    }

    return false;
  }

  function validateSubnet(subnet) {
    var splitSubnet = subnet.split('/');
    return splitSubnet.length == 2 && validateIp(splitSubnet[0]) && !Number.isNaN(parseInt(splitSubnet[1]));
  }
});;
"use strict";

define("ui/components/driver-ionoscloud/component", ["exports", "nodes/components/driver-ionoscloud/component"], function (exports, _component) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function () {
      return _component.default;
    }
  });
});